
# -*- coding: UTF-8 -*-

import pandas as pd
import numpy as np
import csv
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
import math
from sklearn import preprocessing
import matplotlib.pyplot as plt



csv_data = pd.read_csv('H:\\UHI_gain_pain\\process1\\results\\death\\mmt\\revised\\CE\\model\\EVI_model\\New_EVImodel_screen.csv')
npdata=np.array(csv_data)
den=npdata[:,1]           #night

inden=npdata[:,2:14]

csv_data1 = pd.read_csv('H:\\UHI_gain_pain\\process1\\results\\death\\mmt\\revised\\CE\\model\\EVI_model\\New_cold_model18.csv')
npdata1=np.array(csv_data1)
xest1=npdata1[:,2:14]




Xtrain,Xtest,Ytrain,Ytest=train_test_split(inden,den,test_size=0.2,random_state=0)


x_std_transformer=preprocessing.MinMaxScaler().fit(Xtrain)
Xtrain=x_std_transformer.transform(Xtrain)
Xtest=x_std_transformer.transform(Xtest)
xest1=x_std_transformer.transform(xest1)


y_std_transformer=preprocessing.MinMaxScaler().fit(Ytrain.reshape(-1, 1))
Ytrain=y_std_transformer.transform(Ytrain.reshape(-1, 1))
Ytest=y_std_transformer.transform(Ytest.reshape(-1, 1))

print(Ytrain.shape)
print(Xtrain.shape)
print(xest1.shape)



param_n_estimators = {'n_estimators':range(100,600,100),'min_samples_leaf':range(1,200,10)}
#,'min_samples_leaf':range(1,6,1)  SUHIIday ngt     31  CUHIIday    11 ngt   (1,100,10)
RF_model_n_estimators = GridSearchCV(estimator = RandomForestRegressor(random_state=0),
                            param_grid = param_n_estimators,cv=5).fit(Xtrain,Ytrain)

#print('params:\n',RF_model_n_estimators.best_params_)

RF_model_n_estimators=RF_model_n_estimators.best_estimator_.fit(Xtrain,Ytrain)

print('RF_model:\n',RF_model_n_estimators)
print('importances:\n',RF_model_n_estimators.feature_importances_)

pred_SATmax=RF_model_n_estimators.predict(Xtest)
yest1=RF_model_n_estimators.predict(xest1)


print('R2:\n',RF_model_n_estimators.score(Xtest,Ytest))


#进行归一化还原
pred_SATmax=y_std_transformer.inverse_transform(pred_SATmax.reshape(1, -1)).reshape(-1, 1)
Ytest=y_std_transformer.inverse_transform(Ytest.reshape(1, -1)).reshape(-1, 1)
yest1=y_std_transformer.inverse_transform(yest1.reshape(1, -1)).reshape(-1, 1)






#print('results：\n',yest1)
with open("H:\\UHI_gain_pain\\process1\\results\\death\\mmt\\revised\\CE\\model\\EVI_model\\New_cold_model18_est.csv",'w', encoding='utf8') as f1:
    wr=csv.writer(f1, delimiter=',', lineterminator='\n')
    for x1 in yest1:
       wr.writerow(x1)


from sklearn.metrics import mean_squared_error
print('mean_squared_error: \n',mean_squared_error(y_true=Ytest,y_pred=pred_SATmax))


from sklearn.metrics import mean_absolute_error
print('mean_absolute_error: \n',mean_absolute_error(y_true=Ytest,y_pred=pred_SATmax))


from sklearn.metrics import median_absolute_error
print('median_absolute_error: \n',median_absolute_error(y_true=Ytest,y_pred=pred_SATmax))

plt.scatter(Ytest, pred_SATmax,s=5,c='darkred')
xxx = [-10, 0]
yyy = [-10, 0]
plt.plot(xxx, yyy, c='dimgray', linewidth=2, linestyle=':' , marker='' , alpha=0.6)
plt.xticks(fontsize=20, family='Arial')
plt.yticks(fontsize=20, family='Arial')
plt.xlabel("statistical MMP")
plt.ylabel("predicted MMP")
plt.show()

